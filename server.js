require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const helmet = require('helmet');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// === Telegram notifications config ===
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_ADMIN_ID = process.env.TELEGRAM_ADMIN_ID || process.env.ADMIN_TG_ID;

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS ? process.env.ALLOWED_ORIGINS.split(',') : '*'
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(bodyParser.json({ limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  console.log('Headers:', req.headers);
  console.log('Body:', req.body);
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
function verifySignature(payload, signature, secret) {
  if (!secret || !signature) {
    return false;
  }

  try {
    const expectedBuffer = crypto
      .createHmac('sha256', secret)
      .update(payload)
      .digest(); // Buffer

    const providedBuffer = Buffer.from(String(signature).trim(), 'hex');

    if (providedBuffer.length !== expectedBuffer.length) {
      return false;
    }

    return crypto.timingSafeEqual(providedBuffer, expectedBuffer);
  } catch (e) {
    return false;
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP-–∞–¥—Ä–µ—Å–æ–≤ (whitelist)
function checkIPWhitelist(req, res, next) {
  const allowedIPs = process.env.ALLOWED_IPS ? process.env.ALLOWED_IPS.split(',') : [];
  
  if (allowedIPs.length === 0) {
    return next(); // –ï—Å–ª–∏ whitelist –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  }
  
  const clientIP = req.ip || req.connection.remoteAddress || req.socket.remoteAddress;
  console.log('Client IP:', clientIP);
  
  if (!allowedIPs.includes(clientIP)) {
    console.log('IP not in whitelist:', clientIP);
    return res.status(403).json({ error: 'Forbidden: IP not allowed' });
  }
  
  next();
}

// –ì–ª–∞–≤–Ω—ã–π endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.post('/webhook/payment', checkIPWhitelist, (req, res) => {
  try {
    const rawBody = JSON.stringify(req.body);
    const signature = req.headers['x-signature'] || req.headers['signature'];
    const secret = process.env.WEBHOOK_SECRET;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (secret) {
      if (!verifySignature(rawBody, signature, secret)) {
        console.log('Invalid signature');
        return res.status(401).json({ error: 'Invalid signature' });
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const paymentData = req.body;
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', paymentData);
    
    // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    processPayment(paymentData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({ 
      status: 'success', 
      message: 'Webhook received successfully',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
    res.status(500).json({ 
      status: 'error', 
      message: 'Internal server error' 
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
function processPayment(paymentData) {
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
  console.log('=== –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ê ===');
  console.log('–í—Ä–µ–º—è:', new Date().toISOString());
  console.log('–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', JSON.stringify(paymentData, null, 2));
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:
  // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  // - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  // - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  // - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
  
  try {
    // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    switch (paymentData.event_type || paymentData.type) {
      case 'payment.succeeded':
      case 'payment_success':
        handleSuccessfulPayment(paymentData);
        break;
        
      case 'payment.failed':
      case 'payment_failed':
        handleFailedPayment(paymentData);
        break;
        
      case 'payment.pending':
      case 'payment_pending':
        handlePendingPayment(paymentData);
        break;
        
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', paymentData.event_type || paymentData.type);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
function handleSuccessfulPayment(data) {
  console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', data.payment_id || data.id);
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  notifyAdminPaymentEvent('success', data).catch((e) => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', e);
  });
}

function handleFailedPayment(data) {
  console.log('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', data.payment_id || data.id);
  notifyAdminPaymentEvent('failed', data).catch((e) => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', e);
  });
}

function handlePendingPayment(data) {
  console.log('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', data.payment_id || data.id);
  notifyAdminPaymentEvent('pending', data).catch((e) => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', e);
  });
}

// === Telegram helpers ===
async function sendTelegramMessage(chatId, text) {
  if (!TELEGRAM_BOT_TOKEN || !chatId) {
    return;
  }
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: chatId,
    text,
    disable_web_page_preview: true
  };
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  if (!response.ok) {
    const errText = await response.text();
    throw new Error(`Telegram API error: ${response.status} ${errText}`);
  }
}

function extractAmount(paymentData) {
  return {
    amount: paymentData.amount ?? paymentData.total_amount ?? paymentData.sum ?? null,
    currency: paymentData.currency ?? paymentData.currency_code ?? 'RUB'
  };
}

function extractBalance(paymentData) {
  return paymentData.balance ?? paymentData.wallet_balance ?? paymentData.account_balance ?? null;
}

async function notifyAdminPaymentEvent(status, data) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_ADMIN_ID) {
    return; // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã
  }
  const { amount, currency } = extractAmount(data);
  const balance = extractBalance(data);
  const lines = [
    `–ü–ª–∞—Ç—ë–∂: ${status === 'success' ? '–£–°–ü–ï–®–ù–û ‚úÖ' : status === 'failed' ? '–û–¢–ö–õ–û–ù–Å–ù ‚ùå' : '–í –û–ë–†–ê–ë–û–¢–ö–ï ‚è≥'}`,
    amount != null ? `–°—É–º–º–∞: ${amount} ${currency}` : undefined,
    data.payment_id || data.id ? `ID –ø–ª–∞—Ç–µ–∂–∞: ${data.payment_id || data.id}` : undefined,
    data.order_id ? `–ó–∞–∫–∞–∑: ${data.order_id}` : undefined,
    data.status ? `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${data.status}` : undefined,
    balance != null ? `–ë–∞–ª–∞–Ω—Å: ${balance}` : undefined,
    data.customer?.email ? `Email: ${data.customer.email}` : undefined,
    data.customer?.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.customer.phone}` : undefined,
    data.created_at ? `–í—Ä–µ–º—è: ${data.created_at}` : undefined
  ].filter(Boolean);

  const text = lines.join('\n');
  await sendTelegramMessage(TELEGRAM_ADMIN_ID, text);
}

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–∏–ø–æ–≤—ã–º –ø—É—Ç—ë–º healthcheck —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
app.get('/healthz', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –≤–∏–¥–µ—Ç—å Not Found –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–º–µ–Ω–∞
app.get('/', (req, res) => {
  res.status(200).send('OK');
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
app.get('/webhook/info', (req, res) => {
  res.status(200).json({
    service: 'Payment Webhook Service',
    version: '1.0.0',
    webhook_url: `${req.protocol}://${req.get('host')}/webhook/payment`,
    endpoints: {
      webhook: '/webhook/payment (POST)',
      health: '/health (GET)',
      info: '/webhook/info (GET)'
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ error: 'Internal server error' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –≤–µ–±—Ö—É–∫–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook/payment`);
  console.log(`üíö Health check: http://localhost:${PORT}/health`);
  
  if (process.env.WEBHOOK_SECRET) {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–∫–ª—é—á–µ–Ω–∞');
  } else {
    console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_SECRET)');
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});
