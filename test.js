// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞
const http = require('http');
const crypto = require('crypto');

const WEBHOOK_URL = 'http://localhost:3000/webhook/payment';
const SECRET = 'test_secret'; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç –≤ .env —Ñ–∞–π–ª–µ

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
const testPaymentData = {
  event_type: 'payment.succeeded',
  payment_id: 'test_payment_' + Date.now(),
  amount: 1000.00,
  currency: 'RUB',
  status: 'succeeded',
  order_id: 'order_123',
  customer: {
    email: 'test@example.com',
    phone: '+7900123456'
  },
  created_at: new Date().toISOString(),
  metadata: {
    source: 'test_script'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
function createSignature(data, secret) {
  return crypto
    .createHmac('sha256', secret)
    .update(JSON.stringify(data))
    .digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
function sendTestWebhook() {
  const payload = JSON.stringify(testPaymentData);
  const signature = createSignature(testPaymentData, SECRET);
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/webhook/payment',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(payload),
      'X-Signature': signature,
      'User-Agent': 'PaymentSystem/1.0'
    }
  };

  console.log('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞...');
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', testPaymentData);
  console.log('üîê –ü–æ–¥–ø–∏—Å—å:', signature);

  const req = http.request(options, (res) => {
    let responseBody = '';
    
    res.on('data', (chunk) => {
      responseBody += chunk;
    });
    
    res.on('end', () => {
      console.log('\nüì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      console.log('Status:', res.statusCode);
      console.log('Headers:', res.headers);
      console.log('Body:', responseBody);
      
      if (res.statusCode === 200) {
        console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!');
      }
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm start');
  });

  req.write(payload);
  req.end();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±—Ö—É–∫–∞...\n');
  
  // –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
  setTimeout(() => {
    console.log('=== –¢–ï–°–¢ 1: –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ===');
    sendTestWebhook();
  }, 100);
  
  // –¢–µ—Å—Ç 2: –ù–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
  setTimeout(() => {
    console.log('\n=== –¢–ï–°–¢ 2: –ù–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ===');
    const failedPayment = { ...testPaymentData };
    failedPayment.event_type = 'payment.failed';
    failedPayment.status = 'failed';
    failedPayment.payment_id = 'failed_payment_' + Date.now();
    
    const payload = JSON.stringify(failedPayment);
    const signature = createSignature(failedPayment, SECRET);
    
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/webhook/payment',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(payload),
        'X-Signature': signature
      }
    };

    const req = http.request(options, (res) => {
      let responseBody = '';
      res.on('data', (chunk) => { responseBody += chunk; });
      res.on('end', () => {
        console.log('Status:', res.statusCode, 'Body:', responseBody);
      });
    });

    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    });

    req.write(payload);
    req.end();
  }, 2000);

  // –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
  setTimeout(() => {
    console.log('\n=== –¢–ï–°–¢ 3: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å ===');
    const payload = JSON.stringify(testPaymentData);
    
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/webhook/payment',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(payload),
        'X-Signature': 'invalid_signature'
      }
    };

    const req = http.request(options, (res) => {
      let responseBody = '';
      res.on('data', (chunk) => { responseBody += chunk; });
      res.on('end', () => {
        console.log('Status:', res.statusCode, 'Body:', responseBody);
        console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      });
    });

    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞:', error.message);
    });

    req.write(payload);
    req.end();
  }, 4000);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
function checkServer() {
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/health',
    method: 'GET'
  };

  const req = http.request(options, (res) => {
    if (res.statusCode === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...\n');
      runAllTests();
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  });

  req.on('error', (error) => {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm start');
  });

  req.end();
}

// –ó–∞–ø—É—Å–∫
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
checkServer();
